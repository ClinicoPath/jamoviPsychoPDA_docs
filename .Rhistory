roc2 <- attr(rocs.are.paired, "roc2")
}
else { # assume unpaired
rocs.are.paired <- are.paired(roc1, roc2, return.paired.rocs=FALSE)
if (rocs.are.paired)
warning("The ROC curves seem to be paired. Consider performing a paired roc.test.")
roc1 <- roc1
roc2 <- roc2
}
# check that the AUC was computed, or do it now
if (is.null(roc1$auc) | !reuse.auc) {
if (smoothing.args$roc1$smooth) {
roc1$auc <- auc(smooth.roc=do.call("smooth.roc", c(list(roc=roc1), smoothing.args$roc1)), ...)
# remove partial.auc.* arguments that are now in roc1$auc and that will mess later processing
# (formal argument "partial.auc(.*)" matched by multiple actual arguments)
# This removal should be safe because we always use smoothing.args with roc1 in the following processing,
# however it is a potential source of bugs.
smoothing.args$roc1$partial.auc <- NULL
smoothing.args$roc1$partial.auc.correct <- NULL
smoothing.args$roc1$partial.auc.focus <- NULL
}
else
roc1$auc <- auc(roc1, ...)
}
if (is.null(roc2$auc) | !reuse.auc) {
if (smoothing.args$roc2$smooth) {
roc2$auc <- auc(smooth.roc=do.call("smooth.roc", c(list(roc=roc2), smoothing.args$roc2)), ...)
# remove partial.auc.* arguments that are now in roc1$auc and that will mess later processing
# (formal argument "partial.auc(.*)" matched by multiple actual arguments)
# This removal should be safe because we always use smoothing.args with roc2 in the following processing,
# however it is a potential source of bugs.
smoothing.args$roc2$partial.auc <- NULL
smoothing.args$roc2$partial.auc.correct <- NULL
smoothing.args$roc2$partial.auc.focus <- NULL
}
else
roc2$auc <- auc(roc2, ...)
}
# check that the same region was requested in auc. Otherwise, issue a warning
if (!identical(attributes(roc1$auc)[names(attributes(roc1$auc))!="roc"], attributes(roc2$auc)[names(attributes(roc2$auc))!="roc"]))
warning("Different AUC specifications in the ROC curves. Enforcing the inconsistency, but unexpected results may be produced.")
# check that the same smoothing params were requested in auc. Otherwise, issue a warning
if (!identical(smoothing.args$roc1, smoothing.args$roc2))
warning("Different smoothing parameters in the ROC curves. Enforcing the inconsistency, but unexpected results may be produced.")
# Check the method
if (missing(method) | is.null(method)) {
# determine method if missing
if (has.partial.auc(roc1)) {
# partial auc: go for bootstrap
method <- "bootstrap"
}
else if (smoothing.args$roc1$smooth || smoothing.args$roc2$smooth) {
# smoothing in one or both: bootstrap
method <- "bootstrap"
}
else if (roc1$direction != roc2$direction) {
# delong doesn't work well with opposite directions (will report high significance if roc1$auc and roc2$auc are similar and high)
method <- "bootstrap"
}
else {
method <- "delong"
}
}
else {
method <- match.arg(method)
if (method == "delong") {
# delong NA to pAUC: warn + change
if (has.partial.auc(roc1) || has.partial.auc(roc2)) {
stop("DeLong's test is not supported for partial AUC. Use method=\"bootstrap\" instead.")
}
if (smoothing.args$roc1$smooth || smoothing.args$roc2$smooth) {
stop("DeLong's test is not supported for smoothed ROCs. Use method=\"bootstrap\" instead.")
}
if (roc1$direction != roc2$direction)
warning("DeLong's test should not be applied to ROC curves with a different direction.")
}
else if (method == "venkatraman") {
if (has.partial.auc(roc1))
stop("Partial AUC is not supported for Venkatraman's test.")
if (smoothing.args$roc1$smooth || smoothing.args$roc2$smooth)
stop("Venkatraman's test is not supported for smoothed ROCs")
if (roc1$direction != roc2$direction)
warning("Venkatraman's test should not be applied to ROC curves with different directions.")
if (alternative != "two.sided") {
stop("Only two-sided tests are available for Venkatraman.")
}
}
}
# Prepare the return value htest
if (smoothing.args$roc1$smooth)
estimate <- do.call("smooth.roc", c(list(roc=roc1), smoothing.args$roc1))$auc
else
estimate <- roc1$auc
if (smoothing.args$roc2$smooth)
estimate <- c(estimate, do.call("smooth.roc", c(list(roc=roc2), smoothing.args$roc2))$auc)
else
estimate <- c(estimate, roc2$auc)
if (identical(attr(roc1$auc, "partial.auc"), FALSE)) {
nest <- paste(ifelse(smoothing.args$roc1$smooth, "Smoothed ", ""), "AUC of roc1", sep="")
}
else {
nest <- paste(ifelse (attr(roc1$auc, "partial.auc.correct"), "Corrected ", ""),
ifelse (smoothing.args$roc1$smooth, "Smoothed ", ""),
"pAUC (", attr(roc1$auc, "partial.auc")[1], "-", attr(roc1$auc, "partial.auc")[2], " ", attr(roc1$auc, "partial.auc.focus"),
") of roc1", sep="")
}
if (identical(attr(roc2$auc, "partial.auc"), FALSE)) {
nest <- c(nest, paste(ifelse(smoothing.args$roc2$smooth, "Smoothed ", ""), "AUC of roc2", sep=""))
}
else {
nest <- c(nest, paste(ifelse (attr(roc2$auc, "partial.auc.correct"), "Corrected ", ""),
ifelse (smoothing.args$roc2$smooth, "Smoothed ", ""),
"pAUC (", attr(roc2$auc, "partial.auc")[1], "-", attr(roc2$auc, "partial.auc")[2], " ", attr(roc2$auc, "partial.auc.focus"),
") of roc2", sep=""))
}
nest <- sub("Corrected Smoothed", "Corrected smoothed", nest) # no upper on smoothed if corrected.
names(estimate) <- nest
null.value <- 0
names(null.value) <- "difference in AUC"
htest <- list(
alternative = alternative,
data.names = data.names,
estimate = estimate,
null.value = null.value
)
class(htest) <- "htest"
if (method == "delong") {
if (paired) {
stat <- delong.paired.test(roc1, roc2)
names(stat) <- "Z"
htest$statistic <- stat
htest$method <- "DeLong's test for two correlated ROC curves"
if (alternative == "two.sided")
pval <- 2*pnorm(-abs(stat))
else if (alternative == "greater")
pval <- pnorm(-stat)
else
pval <- pnorm(stat)
htest$p.value <- pval
}
else {
stats <- delong.unpaired.test(roc1, roc2)
stat <- stats[1]
df <- stats[2]
htest$statistic <- c("D"=stat)
htest$parameter <- c("df"=df)
htest$method <- "DeLong's test for two ROC curves"
if (alternative == "two.sided")
pval <- 2*pt(-abs(stat), df=df)
else if (alternative == "greater")
pval <- pt(-stat, df=df)
else
pval <- pt(stat, df=df)
htest$p.value <- pval
}
}
else if (method == "venkatraman") {
if(class(progress) != "list")
progress <- roc.utils.get.progress.bar(progress, title="Venkatraman ROC test", label="Permutations in progress...", ...)
if (paired) {
stats <- venkatraman.paired.test(roc1, roc2, boot.n, ties.method, progress, parallel)
htest$method <- "Venkatraman's test for two paired ROC curves"
}
else {
stats <- venkatraman.unpaired.test(roc1, roc2, boot.n, ties.method, progress, parallel)
htest$method <- "Venkatraman's test for two unpaired ROC curves"
}
stat <- stats[[1]]
names(stat) <- "E"
htest$statistic <- stat
parameter <- c(boot.n)
names(parameter) <- "boot.n"
htest$parameter <- parameter
pval <- sum(stats[[2]]>=stats[[1]])/boot.n
htest$p.value <- pval
names(null.value) <- "difference in ROC operating points"
htest$estimate <- NULL # AUC not relevant in venkatraman
}
else { # method == "bootstrap" or "sensitivity" or "specificity"
# Check if called with density.cases or density.controls
if (is.null(smoothing.args) || is.numeric(smoothing.args$density.cases) || is.numeric(smoothing.args$density.controls))
stop("Cannot compute the statistic on ROC curves smoothed with numeric density.controls and density.cases.")
if(class(progress) != "list")
progress <- roc.utils.get.progress.bar(progress, title="Bootstrap ROC test", label="Bootstrap in progress...", ...)
if (method == "specificity") {
if (! is.numeric(specificity) || length(specificity) != 1) {
stop("Argument 'specificity' must be numeric of length 1 for a specificity test.")
}
stat <- bootstrap.test(roc1, roc2, "sp", specificity, paired, boot.n, boot.stratified, smoothing.args, progress, parallel)
if (paired)
htest$method <- "Specificity test for two correlated ROC curves"
else
htest$method <- "Specificity test for two ROC curves"
}
else if (method == "sensitivity") {
if (! is.numeric(sensitivity) || length(sensitivity) != 1) {
stop("Argument 'sensitivity' must be numeric of length 1 for a sensitivity test.")
}
stat <- bootstrap.test(roc1, roc2, "se", sensitivity, paired, boot.n, boot.stratified, smoothing.args, progress, parallel)
if (paired)
htest$method <- "Sensitivity test for two correlated ROC curves"
else
htest$method <- "Sensitivity test for two ROC curves"
}
else {
stat <- bootstrap.test(roc1, roc2, "boot", NULL, paired, boot.n, boot.stratified, smoothing.args, progress, parallel)
if (paired)
htest$method <- "Bootstrap test for two correlated ROC curves"
else
htest$method <- "Bootstrap test for two ROC curves"
}
stat <- as.vector(stat) # remove auc attributes
names(stat) <- "D"
htest$statistic <- stat
parameter <- c(boot.n, boot.stratified)
names(parameter) <- c("boot.n", "boot.stratified")
htest$parameter <- parameter
if (alternative == "two.sided")
pval <- 2*pnorm(-abs(stat))
else if (alternative == "greater")
pval <- pnorm(-stat)
else
pval <- pnorm(stat)
htest$p.value <- pval
}
htest$roc1 <- roc1
htest$roc2 <- roc2
# Remove name from p value
htest$p.value <- unname(htest$p.value)
# Restore smoothing if necessary
if (smoothing.args$roc1$smooth)
htest$roc1 <- do.call("smooth.roc", c(list(roc=roc1), smoothing.args$roc1))
if (smoothing.args$roc2$smooth)
htest$roc2 <- do.call("smooth.roc", c(list(roc=roc2), smoothing.args$roc2))
return(htest)
}
?roc.test
library(haven)
data <- read_sav("files/Gail Sensitivity Data.sav")
View(data)
roc.test(data$scidmdd, data$bditot)
roc.test(data$scidmdd, data$bditot, data$hdstot)
roc.test(as.numeric(data$scidmdd), data$bditot, data$hdstot)
roc.test(as.character(data$scidmdd), data$bditot, data$hdstot)
roc.test(data$scidmdd, as.character(data$bditot), data$hdstot)
roc.test(data$scidmdd~ data$bditot + data$hdstot)
roc.test(as.factor(data$scidmdd) ~ data$bditot + data$hdstot)
roc.test(aSAH$outcome ~ aSAH$wfns + aSAH$s100b)
roc.test(outcome ~ wfns + s100b, data = aSAH)
roc1 <- roc(aSAH$outcome, aSAH$s100b)
roc2 <- roc(aSAH$outcome, aSAH$wfns)
roc.test(roc1, roc2)
roc1 <- pROC::roc(aSAH$outcome, aSAH$s100b)
roc2 <- roc(aSAH$outcome, aSAH$wfns)
roc2 <- pROCroc(aSAH$outcome, aSAH$wfns)
roc2 <- pROC::roc(aSAH$outcome, aSAH$wfns)
roc.test(roc1, roc2)
pROC::roc.test(roc1, roc2)
pROC::roc.test(outcome ~ wfns + s100b, data = aSAH)
pROC::roc.test(outcome ~ wfns + s100b, data = aSAH)
detach("package:cutpointr", unload=TRUE)
roc.test(outcome ~ wfns + s100b, data = aSAH)
# Checks if the
# Input: roc object
# Output: boolean, true the curve reaches 100%/100%, false otherwise
roc.utils.is.perfect.curve <- function(roc) {
best.point <- max(roc$sensitivities + roc$specificities) / ifelse(roc$percent, 100, 1)
return(abs(best.point - 2) < .Machine$double.eps ^ 0.5) # or best.point == 2, with numerical tolerance
}
roc.test(outcome ~ wfns + s100b, data = aSAH)
# Calls delongPlacementsCpp safely
# Ensures that the theta value calculated is correct
delongPlacements <- function(roc) {
placements <- delongPlacementsCpp(roc)
# Ensure theta equals auc
auc <- roc$auc / ifelse(roc$percent, 100, 1)
if (roc$direction == ">") {
auc <- 1 - auc
}
if (! isTRUE(all.equal(placements$theta, auc))) {
sessionInfo <- sessionInfo()
save(roc, placements, sessionInfo, file="pROC_bug.RData")
stop(sprintf("pROC: error in calculating DeLong's theta: got %.20f instead of %.20f. Diagnostic data saved in pROC_bug.RData. Please report this bug to <%s>.", placements$theta, auc, utils:: packageDescription("pROC")$BugReports))
}
return(placements)
}
roc.test(outcome ~ wfns + s100b, data = aSAH)
ci.auc.delong <- function(roc, conf.level) {
YR <- roc$controls # = C2, n, YRj
XR <- roc$cases # = C1, m, XRi
n <- length(YR)
m <- length(XR)
# If controls or cases have a single observation, we would produce NaNs in SX and SY
if (m <= 1 || n <= 1) {
return(rep(NA, 3))
}
V <- delongPlacements(roc)
SX <- sum((V$X - V$theta) * (V$X - V$theta))/(m-1)
SY <- sum((V$Y - V$theta) * (V$Y - V$theta))/(n-1)
S <- SX/m + SY/n
ci <- qnorm(c(0+(1-conf.level)/2, .5, 1-(1-conf.level)/2), mean = V$theta, sd = sqrt(S))
if (roc$direction == ">") {
ci <- rev(1 - ci)
}
# In some rare cases we have ci[3] > 1 or ci[1] < 0
ci[ci > 1] <- 1
ci[ci < 0] <- 0
# According to Pepe (p. 107), we should probably be doing something like
# log(roc$auc / (1 - roc$auc)) + pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))
# log(roc$auc / (1 - roc$auc)) - pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))
# for logit AUC, so that for AUC:
# exp(log(roc$auc / (1 - roc$auc)) + pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))) * (1 - roc$auc)
# exp(log(roc$auc / (1 - roc$auc)) - pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))) * (1 - roc$auc)
# However the bounds are very very much smaller (about 10 times) than bootstrap, which seems unrealistic
# Stay with normal conf interval for now.
return(ci)
}
roc.test(outcome ~ wfns + s100b, data = aSAH)
# Delong's test unpaired, used by roc.test.roc
delong.unpaired.test <- function(roc1, roc2) {
nR <- length(roc1$controls)
mR <- length(roc1$cases)
nS <- length(roc2$controls)
mS <- length(roc2$cases)
VR <- delongPlacements(roc1)
VS <- delongPlacements(roc2)
SRX <- sum((VR$X - VR$theta) * (VR$X - VR$theta))/(mR-1)
SSX <- sum((VS$X - VS$theta) * (VS$X - VS$theta))/(mS-1)
SRY <- sum((VR$Y - VR$theta) * (VR$Y - VR$theta))/(nR-1)
SSY <- sum((VS$Y - VS$theta) * (VS$Y - VS$theta))/(nS-1)
SR <- SRX/mR + SRY/nR
SS <- SSX/mS + SSY/nS
ntotR <- nR + mR
ntotS <- nS + mS
SSR <- sqrt((SR) + (SS))
t <- (VR$theta - VS$theta) / SSR
df <- ((SR) + (SS))^2 /
(((SR)^2 / (ntotR-1)) + ((SS)^2 / (ntotS -1 )))
return(c(t, df))
}
roc.test(outcome ~ wfns + s100b, data = aSAH)
# Delong's test unpaired, used by roc.test.roc
delong.unpaired.test <- function(roc1, roc2) {
nR <- length(roc1$controls)
mR <- length(roc1$cases)
nS <- length(roc2$controls)
mS <- length(roc2$cases)
VR <- delongPlacements(roc1)
VS <- delongPlacements(roc2)
SRX <- sum((VR$X - VR$theta) * (VR$X - VR$theta))/(mR-1)
SSX <- sum((VS$X - VS$theta) * (VS$X - VS$theta))/(mS-1)
SRY <- sum((VR$Y - VR$theta) * (VR$Y - VR$theta))/(nR-1)
SSY <- sum((VS$Y - VS$theta) * (VS$Y - VS$theta))/(nS-1)
SR <- SRX/mR + SRY/nR
SS <- SSX/mS + SSY/nS
ntotR <- nR + mR
ntotS <- nS + mS
SSR <- sqrt((SR) + (SS))
t <- (VR$theta - VS$theta) / SSR
df <- ((SR) + (SS))^2 /
(((SR)^2 / (ntotR-1)) + ((SS)^2 / (ntotS -1 )))
return(c(t, df))
}
# Delong's test paired, used by roc.test.roc
delong.paired.test <- function(roc1, roc2) {
n <- length(roc1$controls)
m <- length(roc1$cases)
VR <- delongPlacements(roc1)
VS <- delongPlacements(roc2)
SX <- matrix(NA, ncol=2, nrow=2)
SX[1,1] <- sum((VR$X - VR$theta) * (VR$X - VR$theta))/(m-1)
SX[1,2] <- sum((VR$X - VR$theta) * (VS$X - VS$theta))/(m-1)
SX[2,1] <- sum((VS$X - VS$theta) * (VR$X - VR$theta))/(m-1)
SX[2,2] <- sum((VS$X - VS$theta) * (VS$X - VS$theta))/(m-1)
SY <- matrix(NA, ncol=2, nrow=2)
SY[1,1] <- sum((VR$Y - VR$theta) * (VR$Y - VR$theta))/(n-1)
SY[1,2] <- sum((VR$Y - VR$theta) * (VS$Y - VS$theta))/(n-1)
SY[2,1] <- sum((VS$Y - VS$theta) * (VR$Y - VR$theta))/(n-1)
SY[2,2] <- sum((VS$Y - VS$theta) * (VS$Y - VS$theta))/(n-1)
S <- SX/m + SY/n
L <- c(1,-1)
sig <- sqrt(L%*%S%*%L)
zscore <- (VR$theta-VS$theta)/sig[1]
if (is.nan(zscore) && VR$theta == VR$theta && sig[1] == 0)
zscore <- 0 # special case: no difference between theta's produces a NaN
return(zscore)
}
roc.test(outcome ~ wfns + s100b, data = aSAH)
# Delong's test unpaired, used by roc.test.roc
delong.unpaired.test <- function(roc1, roc2) {
nR <- length(roc1$controls)
mR <- length(roc1$cases)
nS <- length(roc2$controls)
mS <- length(roc2$cases)
VR <- delongPlacements(roc1)
VS <- delongPlacements(roc2)
SRX <- sum((VR$X - VR$theta) * (VR$X - VR$theta))/(mR-1)
SSX <- sum((VS$X - VS$theta) * (VS$X - VS$theta))/(mS-1)
SRY <- sum((VR$Y - VR$theta) * (VR$Y - VR$theta))/(nR-1)
SSY <- sum((VS$Y - VS$theta) * (VS$Y - VS$theta))/(nS-1)
SR <- SRX/mR + SRY/nR
SS <- SSX/mS + SSY/nS
ntotR <- nR + mR
ntotS <- nS + mS
SSR <- sqrt((SR) + (SS))
t <- (VR$theta - VS$theta) / SSR
df <- ((SR) + (SS))^2 /
(((SR)^2 / (ntotR-1)) + ((SS)^2 / (ntotS -1 )))
return(c(t, df))
}
ci.auc.delong <- function(roc, conf.level) {
YR <- roc$controls # = C2, n, YRj
XR <- roc$cases # = C1, m, XRi
n <- length(YR)
m <- length(XR)
# If controls or cases have a single observation, we would produce NaNs in SX and SY
if (m <= 1 || n <= 1) {
return(rep(NA, 3))
}
V <- delongPlacements(roc)
SX <- sum((V$X - V$theta) * (V$X - V$theta))/(m-1)
SY <- sum((V$Y - V$theta) * (V$Y - V$theta))/(n-1)
S <- SX/m + SY/n
ci <- qnorm(c(0+(1-conf.level)/2, .5, 1-(1-conf.level)/2), mean = V$theta, sd = sqrt(S))
if (roc$direction == ">") {
ci <- rev(1 - ci)
}
# In some rare cases we have ci[3] > 1 or ci[1] < 0
ci[ci > 1] <- 1
ci[ci < 0] <- 0
# According to Pepe (p. 107), we should probably be doing something like
# log(roc$auc / (1 - roc$auc)) + pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))
# log(roc$auc / (1 - roc$auc)) - pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))
# for logit AUC, so that for AUC:
# exp(log(roc$auc / (1 - roc$auc)) + pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))) * (1 - roc$auc)
# exp(log(roc$auc / (1 - roc$auc)) - pnorm( 1-conf.level/2) * (S / (roc$auc * (1 - roc$auc)))) * (1 - roc$auc)
# However the bounds are very very much smaller (about 10 times) than bootstrap, which seems unrealistic
# Stay with normal conf interval for now.
return(ci)
}
# Calls delongPlacementsCpp safely
# Ensures that the theta value calculated is correct
delongPlacements <- function(roc) {
placements <- delongPlacementsCpp(roc)
# Ensure theta equals auc
auc <- roc$auc / ifelse(roc$percent, 100, 1)
if (roc$direction == ">") {
auc <- 1 - auc
}
if (! isTRUE(all.equal(placements$theta, auc))) {
sessionInfo <- sessionInfo()
save(roc, placements, sessionInfo, file="pROC_bug.RData")
stop(sprintf("pROC: error in calculating DeLong's theta: got %.20f instead of %.20f. Diagnostic data saved in pROC_bug.RData. Please report this bug to <%s>.", placements$theta, auc, utils:: packageDescription("pROC")$BugReports))
}
return(placements)
}
delongPlacementsCpp <- function(roc) {
.Call(`_pROC_delongPlacementsCpp`, roc)
}
roc.test(outcome ~ wfns + s100b, data = aSAH)
pROC::roc.test(outcome ~ wfns + s100b, data = aSAH)
library(haven)
data <- read_sav("files/Gail Sensitivity Data.sav")
View(data)
pROC::roc.test(scidmddd ~ bdiot + gdstot, data = data)
pROC::roc.test(scidmddd ~ bditot + gdstot, data = data)
jmvtools::install()
jmvtools::install()
jmvtools::install()
pROC::roc.test(data$scidmddd ~ data$bditot + data$gdstot)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
pROC::roc.test(scidmddd, bditot, gdstot, data = data)
pROC::roc.test("scidmddd", "bditot", "gdstot", data = data)
pROC::roc.test(data$scidmddd, data$bditot, data$gdstot)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
data$bditot
data.frame(data$bditot)
data.frame(data$bditot, data$hdstot)
pROC::roc.test(data$scidmddd, data.frame(data$bditot, data$gdstot))
pROC::roc.test(data$scidmddd, data$bditot, data$gdstot)
outcome = data.frame(data$scidmddd)
data$bditot
predictors = data.frame(data$bditot, data$hdstot)
pROC::roc.test(outcome, predictors)
predictors
pROC::roc.test(outcome, as.numeric(predictors))
jmvtools::install()
?delong.paired.test
??delong.paired.test
delong.paired.test
library(pROC)
delong.paired.test
library(pROC)
debug(delong.paired.test)
debug(pROC::delong.paired.test)
setwd("~/Desktop/psychoPDA_docs")
