plot(cor(populationA, populationB))
populationA <- matrix(rnorm(N*M,mean=0,sd=1), N, M)
populationB <- matrix(rnorm(N*M,mean=0,sd=1), N, M)
plot(cor(populationA, populationB))
library(MASS)
# Let's keep it simple,
mu <- rep(0,4)
Sigma <- matrix(.7, nrow=4, ncol=4) + diag(4)*.3
rawvars <- mvrnorm(n=10000, mu=mu, Sigma=Sigma)
cov(rawvars); cor(rawvars)
# No lets transform some variables
pvars <- pnorm(rawvars)
# Through this process we already have
cov(pvars); cor(pvars)
plot(rawvars[,1], pvars[,2], main="Normal of Var 1 with probabilities of Var 2")
View(Sigma)
View(rawvars)
cov(rawvars); cor(rawvars)
# Through this process we already have
cov(pvars); cor(pvars)
# Let's keep it simple,
mu <- rep(0,2)
Sigma <- matrix(.7, nrow=4, ncol=2) + diag(2)*.3
Sigma <- matrix(.7, nrow=2, ncol=4) + diag(4)*.3
Sigma <- matrix(.7, nrow=2, ncol=4) + diag(2)*.3
# Let's keep it simple,
mu <- rep(0,4)
cor(pvars)
cor(populationA)
cor(pvars, rawvars)
# Let's keep it simple,
mu <- rep(0,4)
rawvars <- mvrnorm(n=10000, mu=mu, Sigma=1)
rawvars <- mvrnorm(n=10000, mu=mu, Sigma=rep(1,4))
Sigma <- matrix(1, nrow=4, ncol=4)
rawvars <- mvrnorm(n=10000, mu=mu, Sigma=Sigma)
cov(rawvars); cor(rawvars)
cov(rawvars); cor(rawvars)
View(rawvars)
# Let's keep it simple,
mu <- rep(0,4)
Sigma <- matrix(.7, nrow=4, ncol=4) + diag(4)*.3
rawvars <- mvrnorm(n=10000, mu=mu, Sigma=Sigma)
cov(rawvars); cor(rawvars)
# Let's keep it simple,
criterionScore <- rnorm(N, mean = 10, sd = 1)
# Let's keep it simple,
criterionScore <- rnorm(N, mean = 10, sd = 1)
N <- 100
M <- 100
# Let's keep it simple,
criterionScore <- rnorm(N, mean = 10, sd = 1)
criterionScore[criterionScore > 10] <- 10
plot(criterionScore)
# No lets transform some variables
pvars <- pnorm(criterionScore)
pvars
# No lets transform some variables
pvars <- pnorm(criterionScore, mean = 10, sd = 1)
plot(pvars)
# Let's keep it simple,
criterionScore <- rnorm(N, mean = 10, sd = 1)
cov(rawvars); cor(rawvars)
testScore <- pnorm(criterionScore, mean = 10, sd = 1)
cor(criterionScore, testScore)
# Now lets transform some variables
testScore2 <- pnorm(criterionScore, mean = 9, sd = 1)
cor(criterionScore, testScore2)
# Now lets transform some variables
testScore2 <- pnorm(criterionScore, mean = 8, sd = 1)
cor(criterionScore, testScore2)
# Now lets transform some variables
testScore2 <- pnorm(criterionScore, mean = 7, sd = 1)
# Now lets transform some variables
testScore2 <- pnorm(criterionScore, mean = 7, sd = 1)
cor(criterionScore, testScore2)
testScores0to1 <- matrix(nrows = 1, ncol = 10)
testScores0to1 <- matrix(nrow = 1, ncol = 10)
for (i in 1:seq(0,10,length.out = 10)){
testScores0to1[1,i] <- pnorm(criterionScore, mean = i, sd = 1)
}
testScores0to1 <- matrix(nrow = 100, ncol = 10)
for (i in 1:seq(0,10,length.out = 10)){
testScores0to1[,i] <- pnorm(criterionScore, mean = i, sd = 1)
}
View(testScores0to1)
seq(0,10,length.out = 10)
testScores0to1 <- matrix(nrow = 100, ncol = 11)
seq(0,10,length.out = 11)
testScoreMeanSeq <- seq(0,10,length.out = 11)
for (i in 1:testScoreMeanSeq){
testScores0to1[,i] <- pnorm(criterionScore, mean = i, sd = 1)
}
for (i in length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = i, sd = 1)
}
View(testScores0to1)
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = i, sd = 1)
}
View(testScores0to1)
cor(criterionScore, testScores0to1)
# Let's keep it simple,
criterionScore <- rnorm(N, mean = 10, sd = 1)
testScores0to1 <- matrix(nrow = N, ncol = M)
testScores0to1 <- matrix(nrow = N, ncol = M)
N = 1000
M = 100
# Let's keep it simple,
criterionScore <- rnorm(N, mean = 10, sd = 1)
testScores0to1 <- matrix(nrow = N, ncol = M)
testScoreMeanSeq <- 1:100
testScoreMeanSeq <- 0:1
testScoreMeanSeq <- seq(0:1, by = 0.01)
testScoreMeanSeq <- seq(0,1, by = 0.01)
testScoreMeanSeq <- seq(0.01, 1, by = 0.01)
testScoreMeanSeq <- seq(0.1, 10, by = 0.1)
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
plot(cor(criterionScore, testScores0to1))
cor(criterionScore, testScores0to1)
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = cor(criterionScore, testScoreMeanSeq)))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = cor(criterionScore, testScores0to1))))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = cor(criterionScore, testScores0to1)))
corList <- cor(criterionScore, testScores0to1)
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = list(corList)))
corList <- as.list(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
corList <- as.numeric(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
corTestStatisticList <- as.numeric(cor.test(criterionScore, testScores0to1))
cor.test(criterionScore, testScores0to1)
map2(criterionScore, testScores0to1, cor.test)
corTestStatisticList <- as.numeric(map2(rep(criterionScore, 100), testScores0to1, cor.test))
map2(rep(criterionScore, 100), testScores0to1, cor.test)
x <- rep(criterionScore, 100)
x <- matrix(criterionScore, nrow = N, ncol = M)
View(x)
corTestStatisticList <- as.numeric(map2(matrix(criterionScore, nrow = N, ncol = M), testScores0to1, cor.test))
corTestStatisticList <- as.numeric(map2(x, testScores0to1, cor.test))
x
cor.test(x, testScores0to1)
corTestStatisticList <- as.numeric(map2(array_branch(matrix(criterionScore, nrow = N, ncol = M)),
array_branch(testScores0to1, cor.test)))
map2(array_branch(matrix(criterionScore, nrow = N, ncol = M)),
array_branch(testScores0to1, cor.test)))
corTestStatisticList <- as.numeric(map2(array_branch(matrix(criterionScore, nrow = N, ncol = M)),
array_branch(testScores0to1), cor.test))
map2(array_branch(matrix(criterionScore, nrow = N, ncol = M)),
array_branch(testScores0to1), cor.test)
corTestStatisticList <- as.numeric(map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test))
map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
View(corTestStatisticList)
View(corTestStatisticList)
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)$statistic
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[i] <- corTestStatisticList[i]$statistic
}
View(corTestStatisticList)
View(corTestStatisticList)
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[i]$statistic
}
View(corTestStatisticList)
temp <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList <- temp[i]$statistic
}
corTestStatisticList <- corTestStatisticList[[i]]$statistic
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList <- corTestStatisticList[[i]]$statistic
}
corTestStatisticList[1]
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList[1]
corTestStatisticList[1]$statistic
for (i in 1:length(corTestStatisticList)){
corTestStatisticList <- corTestStatisticList[[i]][["statistic"]]
}
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[i] <- corTestStatisticList[[i]][["statistic"]]
}
View(corTestStatisticList)
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
View(corTestStatisticList)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
View(corTestStatisticList)
View(corTestStatisticList)
corTestStatisticList <- unlist(corTestStatisticList)
plot(corTestStatisticList)
library(purrr)
library(ggplot2)
# Sample size
N = 1000
# Number of samples
M = 100
# Let's keep it simple.
# An imaginry criteron score with mean = 10, sd = 1
criterionScore <- rnorm(N, mean = 10, sd = 1)
# Imaginary test scores whose means range from 0 to 10, with sd = 1
testScores0to1 <- matrix(nrow = N, ncol = M)
testScoreMeanSeq <- seq(0.1, 10, by = 0.1)
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
# Correlations between the critereon and the test scores
corList <- as.numeric(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
x <- unlist(corTestStatisticList)
corTestStatisticList <- unlist(corTestStatisticList)
ggplot() +
geom_point(aes(x = corTestStatisticList, y = corList))
ggplot() +
geom_point(aes(x = corList, y = corTestStatisticList))
ggplot() +
geom_point(aes(x = criterionScore, y = corTestStatisticList))
ggplot() +
geom_point(aes(x = corTestStatisticList, y = corList))
View(corTestStatisticList)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestStatisticList[[i]][["statistic"]]
}
corTestStatisticList <- unlist(corTestStatisticList)
?cor.test
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
View(corTestStatisticList)
corTestStatisticList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
View(corTestStatisticList)
View(corTestStatisticList)
cor.test
View(corTestStatisticList)
t <- (cor(criterionScore, testScores0to1[1])*sqrt(N-2)*(sqrt(1-cor(criterionScore, testScores0to1[1])^2))
t <- (cor(criterionScore, testScores0to1[1])*sqrt(N-2))*(sqrt(1-cor(criterionScore, testScores0to1[1])^2))
t <- (cor(criterionScore, testScores0to1[,1])*sqrt(N-2))*(sqrt(1-cor(criterionScore, testScores0to1[1])^2))
t <- (cor(criterionScore, testScores0to1[,1])*sqrt(N-2))*(sqrt(1-cor(criterionScore, testScores0to1[,1])^2))
t
cor(criterionScore, testScores0to1[,1])
pnorm(t)
myNull <- 0.8
corTestStatisticList[[1]][["conf.int"]][[2]]
corTestStatisticList[[1]][["conf.int"]][[2]] > myNull
# Cor.test requires the null hyp be correlation = 0. This seems off
corTestList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- list()
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
}
corTestUpperConfBound <- list()
for (i in 1:length(corTestStatisticList)){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
}
corTestUpperConfBound
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
}
corTestUpperConfBound
corTestUpperConfBound <- unlist(corTestUpperConfBound)
corTestUpperConfBound > myNull
ggplot() +
geom_point(x = testScoreMeanSeq, y = corList)
ggplot() +
geom_point(x = testScoreMeanSeq, y = corList)
data <- data.frame(cbind(corList, corTestStatisticList, corTestUpperConfBound, testScoreMeanSeq, corTestUpperConfBound > myNull))
ggplot(data) +
geom_point(x = testScoreMeanSeq, y = corList)
ggplot(data) +
geom_point(x = testScoreMeanSeq, y = corList)
View(data)
ggplot(data) +
geom_point(y = testScoreMeanSeq, x = corList)
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList))
View(data)
corTestStatisticList <- unlist(corTestStatisticList)
corTestUpperConfBound <- unlist(corTestUpperConfBound)
data <- data.frame(cbind(corList, corTestStatisticList, corTestUpperConfBound, testScoreMeanSeq, corTestUpperConfBound > myNull))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = corTestUpperConfBound))
data <- data.frame(cbind(corList, corTestStatisticList, corTestUpperConfBound, testScoreMeanSeq, x = (corTestUpperConfBound > myNull))
isSig <- corTestUpperConfBound > myNull
isSig <- data.frame(corTestUpperConfBound > myNull)
testScoreMeanSeq,
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig))
isSig <- data.frame(isSig = corTestUpperConfBound > myNull)
data <- data.frame(cbind(corList,
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = V5))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = V5))
isSig <- data.frame(as.factor(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.boolean(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.factor(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.logical(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(as.logical(isSig = corTestUpperConfBound > myNull))
isSig <- data.frame(isSig = as.logical(corTestUpperConfBound > myNull))
data <- data.frame(cbind(corList,
isSig = isSig)
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
isSig = isSig))
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
isSig = isSig))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig ))
sevList <- 1-pnorm(corTestStatisticList)
sevList
round(sevList, 4)
corTestStatisticList
View(corTestList)
corTestList[[1]][["estimate"]][["cor"]]
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList <- list()
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList
corTestCorList <- unlist(corTestCorList)
corTestCorList
View(testScores0to1)
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- rnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
# Correlations between the critereon and the test scores
corList <- as.numeric(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
# Cor.test requires the null hyp be correlation = 0. This seems off
corTestList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- list()
corTestUpperConfBound <- list()
corTestCorList <- list()
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList <- unlist(corTestCorList)
corTestStatisticList <- unlist(corTestStatisticList)
sevList <- 1-pnorm(corTestStatisticList)
corTestUpperConfBound <- unlist(corTestUpperConfBound)
isSig <- data.frame(isSig = as.logical(corTestUpperConfBound > myNull))
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
sevList,
isSig = isSig))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig ))
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
for (i in 1:length(testScoreMeanSeq)){
testScores0to1[,i] <- pnorm(criterionScore, mean = testScoreMeanSeq[i], sd = 1)
}
# Correlations between the critereon and the test scores
corList <- as.numeric(cor(criterionScore, testScores0to1))
ggplot() +
geom_point(aes(x = testScoreMeanSeq, y = corList))
View(testScores0to1)
# Cor.test requires the null hyp be correlation = 0. This seems off
corTestList <- map2(array_branch(matrix(criterionScore, nrow = N, ncol = M), 2),
array_branch(testScores0to1, 2), cor.test)
corTestStatisticList <- list()
corTestUpperConfBound <- list()
corTestCorList <- list()
for (i in 1:M){
corTestStatisticList[[i]] <- corTestList[[i]][["statistic"]]
corTestUpperConfBound[[i]] <- corTestList[[i]][["conf.int"]][[2]]
corTestCorList[[i]] <- corTestList[[i]][["estimate"]][["cor"]]
}
corTestCorList <- unlist(corTestCorList)
corTestStatisticList <- unlist(corTestStatisticList)
sevList <- 1-pnorm(corTestStatisticList)
corTestUpperConfBound <- unlist(corTestUpperConfBound)
isSig <- data.frame(isSig = as.logical(corTestUpperConfBound > myNull))
data <- data.frame(cbind(corList,
corTestStatisticList,
corTestUpperConfBound,
testScoreMeanSeq,
sevList,
isSig = isSig))
ggplot(data) +
geom_point(aes(x = testScoreMeanSeq, y = corList, colour = isSig ))
ggplot() +
geom_density(testScores0to1)
ggplot() +
geom_density(aes(testScores0to1))
ggplot() +
geom_density(aes(melt(testScores0to1)))
x <- melt(testScores0to1)
ggplot() +
geom_density(aes(x$value, colour = Var2))
ggplot() +
geom_density(aes(x$value, colour = x$Var2))
View(x)
ggplot() +
geom_point(aes(x$value, y = x$Var1, colour = x$Var2))
ggplot() +
geom_point(aes(x$value, y = x$Var1), colour = x$Var2)
ggplot() +
geom_point(aes(x$value, y = x$Var2), colour = x$Var1)
ggplot() +
geom_point(aes(y$value, x = x$Var2), colour = x$Var1)
ggplot() +
geom_point(aes(y = x$value, x = x$Var2), colour = x$Var1)
ggplot() +
geom_point(aes(x$value, y = x$Var1), colour = x$Var2)
ggplot() +
geom_point(aes(x = x$var2 y = x$Var1), colour = value)
ggplot() +
geom_point(aes(x = x$var2, y = x$Var1), colour = value)
ggplot() +
geom_point(aes(x = x$var2, y = x$Var1), colour = x$value)
ggplot() +
geom_point(aes(x = x$var2, y = x$Var1)
)
ggplot() +
geom_point(aes(x = x$value, y = x$Var1), colour = x$Var2)
ggplot() +
geom_point(aes(x = corTestStatisticList, y = corList))
plot(corTestStatisticList)
ggplot() +
geom_density(aes(corTestStatisticList))
corTestStatisticList
ggplot() +
geom_density(aes(corList))
int_start()
setwd("~/Desktop/psychoPDA_docs")
library(difR)
data <- data("verbal")
psychoPDA::glmDIF(
data = data,
item = vars(S1wantCurse, S1WantScold, S1WantShout),
group = Gender,
matchVar = Anger,
anchor = vars(),
groupType = "group",
twoGroups = TRUE,
difFlagScale = "zt",
designAnalysis = TRUE,
criterion = "Wald",
coeffEff = TRUE,
plotVarsICC = S1wantCurse)
library(psychoPDA)
?gamlj
??gamlj
